# do zrobienia
dodać path do package.json żeby można było robić krótsze importy
react-router napisać osobny plik router i zrobić demo na start
prop-types instead PropTypes
styled components instead styles in react
skrypty dla npm npx napisać i ustalić co i jak z i npmem. taski scripts itd DODAĆ ENV w package żeby krótsze importy móc robić!!!!
yarn + webpack = opisać w dokumentacji skryptty komendy i konfigurację i instalacje
dodać progressive we apps konfiguracja tego service-worker.js
własna biblioteka css
	(resp tabele, grid fleksowy, resp img, clearfix, normalize kontener i fluid kontener) paleta kolorów css:
	responsive breakpoints, mediaqueries.scss, variables.scss
	container, container-fluid
	margin, padding, visibility, display float  position width height spacing, text align, helpers class
	typography, font stack, headers, lists, blockquotes, code a p
	img-fluid
	jakieś modale gotowe? navbary? menusy wyskakujące? albo takie sticky?
	*szybkie demo gridu i innych klas*
	plik readme i repo na githubie
zobaczyć jak działają testy jakiesś, jest np?
czy mogę zmienić licencję po ejectowaniu?
dodać jakiś szablon gimpowo affinitowo photoshopowy z gridem?

# co już wprowadzone
ustawiony git ignore
ejectowany create react app
zmieniona struktura katalogów
sourcesmaps css default on in dev env
dodana dokumentacja
robotstxt domyślnie na disallow! zaznacz to w dokumentacji!
skonfigurowany sass z autoprefiksem
react router i htacces w publiku pod apache z routerem  https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#serving-apps-with-client-side-routing

## struktura katalogów
- `src/api.js` - You’ll probably need to make calls to a backend API at some point. Put all that code here. If it gets too unwieldy in one file, make a `src/api`directory and put the area-specific API files under there – like `userApi.js`, `productApi.js`, etc.
- `src/components` - All your Presentational (aka Dumb) components go here. These are the simple stateless ones that just take props.
- `src/containers` - The Container components go here. These are the stateful ones, and the ones that make the API calls. If you’re using Redux, these are the ones that are connected to the store. Notice that CSS and tests are in the same folder as their respective components.
- `src/images` - Put the images in one place to start with.
- `src/index.js` - This is where you initialize the app and call ReactDOM.render, so it makes sense to keep this at the top level.
- `src/utils` - You’ll probably end up with miscellaneous utility functions – error handlers, formatters, and the like. I usually put them in a file inside utils so I can access them easily.